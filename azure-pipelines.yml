# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

#this means when you push to the master branch, a build is triggered
trigger:
  - main

#using the latest windows image to as SDK etc
pool:
  vmImage: 'windows-latest'

#setting variables
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

#adds the NuGet installer
steps:
- task: NuGetToolInstaller@1
#this task restores the solution
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'RPSGameDemoPipeline'
    organization: 'markmoore0827'
    scannerMode: 'MSBuild'
    projectKey: 'markmoore0827_RPSGameDemoPipeline'
    projectName: 'RPSGameDemoPipeline'
    extraProperties: 
    #   sonar.exclusions=**/obj/**,**/*.dll
    #   sonar.branch.name=$(Build.SourceBranchName)
      sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml

#build the .sln bc on line 63 there is a nobuild: true that 
#tells the system that a full build already happened.
# - task: DotNetCoreCLI@2
#   displayName: Build
#   inputs:
#     command: 'build'
#     projects: './RpsGame/RPS_GameMvc.sln'
#     arguments: '--configuration $(buildConfiguration)'
- script: dotnet build ./RPS_GameMvc/RPS_GameMvc.sln

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: 'test'
    arguments: #logger trx (a format for logging test results.) is on by default
      --configuration $(buildConfiguration) 
      --collect:"XPlat Code Coverage" 
      -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover,Cobertura
      # /p:CollectCoverage=true
      # /p:CoverletOutputFormat=opencover
      # /p:Coverletoutput=$(Build.SourceDirectory)/TestResults/Coverage
    projects: './RPS_GameMvc.Tests/RPS_GameMvc.Tests.csproj'
    nobuild: true
# - script: dotnet test './RPS_GameMvc.Tests/RPS_GameMvc.Tests.csproj'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.coburtura.xml' #tells devops where to look for the xml test file
    #reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage' #take this out bc this is already collected on line 59
- task: SonarCloudAnalyze@1

#tells Sonarcloud if the quality gate passed or failed.
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
# - script: dotnet publish './RpsGame/RPS_GameMvc.csproj'
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
    appType: 'webApp'
    appName: 'RockPaperScissorsDemoSite'
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
    deploymentMethod: 'auto'

- task: PublishBuildArtifacts@1
